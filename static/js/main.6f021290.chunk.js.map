{"version":3,"sources":["routes/detail.jsx","store.js","components/list.jsx","components/toDos.jsx","routes/home.jsx","components/App.jsx","index.js"],"names":["Detail","props","ADD","DELETE","initialState","store","createStore","state","action","type","newToDoObj","text","id","Date","now","newToDos","filter","toDo","actionCreater","connect","dispatch","deleteToDo","onClick","ToDos","toDos","map","ownProps","addToDo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","reset","App","path","exact","component","Home","add","document","getElementById","minus","number","querySelector","innerText","countStore","count","subscribe","getState","addEventListener","form","input","ul","ADD_TODO","DELETE_TODO","toDosStore","dispatchAddToDo","dispatchDeleteToDo","e","parseInt","target","parentNode","innerHTML","forEach","li","createElement","btn","appendChild","ReactDOM","render"],"mappings":"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","file":"static/js/main.6f021290.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Detail = props => <h1>Detail</h1>;\n\nexport default Detail;\n","import { createStore } from \"redux\";\n\nconst ADD = \"ADD\";\nconst DELETE = \"DELETE\";\n\n//action creater\nconst addToDo = text => {\n  return {\n    type: ADD,\n    text,\n  };\n};\n\nconst deleteToDo = id => {\n  return {\n    type: DELETE,\n    id,\n  };\n};\n\nconst initialState = [];\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD:\n      const newToDoObj = { text: action.text, id: Date.now() };\n      return [newToDoObj, ...state];\n    case DELETE:\n      const newToDos = state.filter(toDo => toDo.id !== action.id);\n      return newToDos;\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport const actionCreater = {\n  addToDo,\n  deleteToDo,\n};\n\nexport default store;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { actionCreater } from \"../store\";\n\nconst List = ({ toDo, deleteToDo }) => {\n  const deleteList = () => {\n    deleteToDo(toDo.id);\n  };\n\n  return (\n    <li>\n      {toDo.text}\n      <button onClick={deleteList}>delete</button>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteToDo: id => dispatch(actionCreater.deleteToDo(id)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(List);\n","import React from \"react\";\nimport List from \"./list\";\n\nconst ToDos = ({ toDos }) => {\n  return (\n    <ul>\n      {toDos.map(toDo => {\n        return <List toDo={toDo} key={toDo.id} />;\n      })}\n    </ul>\n  );\n};\n\nexport default ToDos;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ToDos from \"../components/toDos\";\nimport { actionCreater } from \"../store\";\n\nconst Home = ({ toDos, addToDo }) => {\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const text = inputRef.current.value;\n    text && addToDo(text);\n    formRef.current.reset();\n  };\n\n  return (\n    <>\n      <h1>To Dos </h1>\n      <form ref={formRef} onSubmit={onSubmit}>\n        <input ref={inputRef} type=\"text\" />\n        <button>Add</button>\n      </form>\n      <ToDos toDos={toDos} />\n    </>\n  );\n};\n\n//순수함수, 동기적\nconst mapStateToProps = (state, ownProps) => {\n  return { toDos: state };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addToDo: text => dispatch(actionCreater.addToDo(text)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Detail from \"../routes/detail\";\nimport Home from \"../routes/home\";\n\nconst App = props => {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Home}></Route>\n      <Route path=\"/:id\" component={Detail}></Route>\n    </Router>\n  );\n};\n\nexport default App;\n","import { createStore } from \"redux\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\n//// counter구현 ////\n\nconst add = document.getElementById(\"add\");\nconst minus = document.getElementById(\"minus\");\nconst number = document.querySelector(\"span\");\nnumber.innerText = 0;\n// 🌟Reducer is func and 🌟ONLY Reducer can control(modify) datas(states)!\n// 🌟reducer가 return하는건 app의 state(data)이다, 여야한다.\n// (currnet State, action)\n//2. 리듀서 생성\nconst countModifier = (count = 0, action) => {\n  //5. 입력받은 action에 따라 state를 조작하여 리턴\n  switch (action.type) {\n    case \"ADD\":\n      return count + 1;\n    case \"MINUS\":\n      return count - 1;\n    default:\n      return count;\n  }\n};\n\n//1. 스토어 생성 후\n//3. 생성된 reducer를 전달\nconst countStore = createStore(countModifier);\n\nconst onChange = () => {\n  // console.log(\"there was a change on the store\");\n  number.innerText = countStore.getState();\n};\ncountStore.subscribe(onChange);\n\n// reducer의 두번째 인자로 들어가는 action은 disaptch를 통해서 전달!\n//4.디스패치를 통해 action를 리듀서로 전달. (action은 리듀서와 소통하는 유일한 방법!!)\n//action은 오브젝트 이다! 항상 type을 가져야하고, 그 키 값은 바뀔 수 없다.\n// countStore.dispatch({ type: \"ADD\" });\n// type를 const ADD = \"ADD\"라고 정의하여 사용하게된다면 오류가 났을 때 정확히 판단할 수 있을 것이다(js가 오류룰 출력할 것이기 때문이다.).\n\nconst handleAdd = () => {\n  countStore.dispatch({ type: \"ADD\" });\n};\n\nconst handleMinus = () => {\n  countStore.dispatch({ type: \"MINUS\" });\n};\n\nadd.addEventListener(\"click\", handleAdd);\nminus.addEventListener(\"click\", handleMinus);\n\n/*************************************************/\n//// To Dos ////\n\nconst form = document.querySelector(\"form\");\nconst input = document.querySelector(\"input\");\nconst ul = document.querySelector(\"ul\");\n\n//액션 타입\nconst ADD_TODO = \"ADD_TODO\";\nconst DELETE_TODO = \"DELETE_TODO\";\n\n//액션 생성자 함수\nconst addToDo = text => {\n  return { type: ADD_TODO, text };\n};\nconst deleteToDo = id => {\n  return { type: DELETE_TODO, id };\n};\n\n//리듀서\nconst reducer = (state = [], action) => {\n  // console.log(action);\n  switch (action.type) {\n    case ADD_TODO:\n      const newToDoObj = { text: action.text, id: Date.now() };\n      return [newToDoObj, ...state];\n    case DELETE_TODO:\n      // filter을 이용하여 state를 변경하는 것이 아닌 새로운 배열을 리턴한다\n      const newToDos = state.filter(toDo => toDo.id !== action.id);\n      return newToDos;\n    default:\n      return state;\n  }\n};\n\n//스토어 생성\nconst toDosStore = createStore(reducer);\n\n//dispatch\nconst dispatchAddToDo = text => {\n  toDosStore.dispatch(addToDo(text));\n};\nconst dispatchDeleteToDo = e => {\n  const id = parseInt(e.target.parentNode.id);\n  toDosStore.dispatch(deleteToDo(id));\n};\n\n//subscribe의 listener\nconst paintToDos = () => {\n  const toDos = toDosStore.getState();\n  ul.innerHTML = \"\";\n  toDos.forEach(toDo => {\n    const li = document.createElement(\"li\");\n    const btn = document.createElement(\"button\");\n    btn.innerText = \"delete\";\n    btn.addEventListener(\"click\", dispatchDeleteToDo);\n    li.id = toDo.id;\n    li.innerText = toDo.text;\n    li.appendChild(btn);\n    ul.appendChild(li);\n  });\n};\n\ntoDosStore.subscribe(paintToDos);\n\nconst onSubmit = e => {\n  e.preventDefault();\n  const toDo = input.value;\n  input.value = \"\";\n  dispatchAddToDo(toDo);\n};\n\nform.addEventListener(\"submit\", onSubmit);\n\n//// React Redux\nReactDOM.render(\n  <Provider store={store}>\n    <App></App>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}